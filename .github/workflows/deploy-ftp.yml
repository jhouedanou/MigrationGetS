name: Deploy to OVH via FTP

# D√©clenchement du workflow
on:
  push:
    branches:
      - main  # D√©ploie automatiquement quand on push sur main
  workflow_dispatch:  # Permet de d√©clencher manuellement depuis GitHub

jobs:
  deploy:
    name: Deploy to FTP
    runs-on: ubuntu-latest

    steps:
      # 1. R√©cup√©rer le code source
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # N√©cessaire pour git-ftp

      # 2. Configurer git-ftp
      - name: Setup git-ftp
        run: |
          sudo apt-get update
          sudo apt-get install -y git-ftp

      # 3. D√©ployer via FTP
      - name: Deploy to FTP
        env:
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_USER: ${{ secrets.FTP_USER }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_PATH: ${{ secrets.FTP_PATH }}
        run: |
          # Configuration git-ftp
          git config git-ftp.url "ftp://$FTP_HOST$FTP_PATH"
          git config git-ftp.user "$FTP_USER"
          git config git-ftp.password "$FTP_PASSWORD"

          # Premier d√©ploiement ou mise √† jour
          if git ftp push 2>&1 | grep -q "fatal"; then
            echo "Initialisation du d√©ploiement FTP..."
            git ftp init --force
          else
            echo "Mise √† jour via FTP..."
            git ftp push
          fi

      # 4. Notification de succ√®s
      - name: Deployment success
        if: success()
        run: |
          echo "‚úÖ D√©ploiement r√©ussi sur $FTP_HOST"
          echo "üì¶ Fichiers d√©ploy√©s: $(git diff-tree --no-commit-id --name-only -r HEAD | wc -l)"

      # 5. Notification d'erreur
      - name: Deployment failed
        if: failure()
        run: |
          echo "‚ùå Le d√©ploiement a √©chou√©"
          echo "V√©rifiez les logs ci-dessus pour plus de d√©tails"
